//Example Class 1:
#include <stdio.h>
#include <stdlib.h>

#define ARRAY_SIZE 50
int list[ARRAY_SIZE];

void insertionSort(int n, int m);
void hybridMergeSort(int n, int m, int s);
void merge(int n, int m);

int main() {
  int i;
  int s;

  // set up and print the array
  printf("\nBefore Sorting:\n");
  for(i = 0;i<ARRAY_SIZE;i++){
    list[i] = rand()%ARRAY_SIZE;
    printf("%d ", list[i]);
  }

  // get S value
  printf("\nEnter S Value:");
  scanf("%d", &s);
  
  //do sorting
  hybridMergeSort(0,ARRAY_SIZE-1, s);
  
  // print and check the list if it is sorted
  printf("\nAfter Sorting:\n");
  int check = 1;
  printf("%d ", list[0]);
  for(i = 1;i<ARRAY_SIZE;i++){
    printf("%d ", list[i]);
    if(list[i-1]>list[i]){
      check = 0;
    }
  }
  if(check == 1){
    printf("\nSorted\n");
  }
  else{
    printf("\nNot Sorted\n");
  }
}

void insertionSort(int n, int m){
  int head1 = n+1;
  int i,j;
  int temp;
  for(i=n+1;i<=m;i++){
    for(j=i;j>n;j--){
      //initialize base case;
      if(list[j]>=list[j-1]){
        break;
      }
      else{
        temp = list[j];
        list[j] = list[j-1];
        list[j-1] = temp;
      }
    }
    head1++;
  }
  return;
}

void hybridMergeSort(int n, int m, int s){
  int arraySize = m-n+1;
  if(arraySize <= s){
    insertionSort(n,m);
    return;
  }
  int mid = (n+m)/2;
  hybridMergeSort(n,mid, s);
  hybridMergeSort(mid+1, m, s);

  merge(n,m);
  return;
}

void merge(int n, int m){
  int head1, tail1, head2, tail2;
  // initialize;
  head1 = n;
  tail1 = (n+m)/2;
  head2 = tail1+1;
  tail2 = m;

  //initialize base case;
  if(n>=m){
    return;
  }
  int temp;
  int i;
  while(head1<=tail1 && head2<=tail2){
    if(list[head1]>list[head2]){
      temp = list[head2];
      for(i=head2;i>head1;i--){
        list[i] = list[i-1];
      }
      list[i] = temp;
      head2++;
      tail1++;
      head1++;
    }

    else if(list[head1]<list[head2]){
      head1++;
    }

    else{
      if(head1 == tail1 && head2 == tail2){
        break;
      }
      temp = list[head2];
      for(i = head2;i>head1;i--){
        list[i] = list[i-1];
      }
      list[i] = temp;
      head2++;
      head1++;
      tail1++;
    }
  }
}
